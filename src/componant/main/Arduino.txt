#include <PubSubClient.h>
#include <WiFi.h>

#define ON 1
#define OFF 0

// Initial WiFi
const char* ssid = "bubu";
const char* password = "Piano6367315";
WiFiClient espClient;

// Initial MQTT client
const char* mqttServer = "mqtt.netpie.io";
const int mqttPort = 1883;
const char* clientID = "04bae359-5265-4c49-aab6-448f4f24e1f1";
const char* mqttUser = "ih9bhMfxBNCwV32iy365G8KGiX22Rtvv";
const char* mqttPassword = "GXqUjsrcbRPcj8dkfEJx589RTryTKTny";
const char* topic_pub = "@msg/lab_nodered_ict_kps/metal/data";
const char* topic_sub = "@msg/lab_nodered_ict_kps/command";
// send buffer
String publishMessage;

PubSubClient client(espClient);

// MENTAL TOUCH MODULE and Buzzer Pins
int touchModulePin = 34;
int buzzerPin = 4;
int BUZZER_status = OFF;

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println();
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnectMQTT() {
  char mqttinfo[80];
  snprintf(mqttinfo, 75, "Attempting MQTT connection at %s:%d (%s/%s)...", mqttServer, mqttPort, mqttUser, mqttPassword);
  while (!client.connected()) {
    Serial.println(mqttinfo);
    String clientId = clientID;
    if (client.connect(clientId.c_str(), mqttUser, mqttPassword)) {
      Serial.println("...Connected");
      client.subscribe(topic_sub);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}

void messageReceivedCallback(char* topic, byte* payload, unsigned int length) {
  char payloadMsg[80];

  Serial.print("Message arrived in topic: ");
  Serial.println(topic);
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    payloadMsg[i] = (char)payload[i];
  }
  payloadMsg[length] = '\0';
  Serial.println();
  Serial.println("-----------------------");
  processMessage(payloadMsg);
}

void processMessage(String recvCommand) {
  if (recvCommand == "TOUCH_ON") {
    digitalWrite(touchModulePin, HIGH);
  } else if (recvCommand == "TOUCH_OFF") {
    digitalWrite(touchModulePin, LOW);
  } else if (recvCommand == "BUZZER_ON") {
    digitalWrite(buzzerPin, HIGH);
    tone(buzzerPin, 1000);
    BUZZER_status = ON;
  }  else if (recvCommand == "BUZZER_OFF") {
    digitalWrite(buzzerPin, LOW);
    noTone(buzzerPin);
    BUZZER_status = OFF;  // เพิ่มข้อความเมื่อ Buzzer ถูกปิด
  }
}

void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqttServer, mqttPort);
  client.setCallback(messageReceivedCallback);
  pinMode(touchModulePin, INPUT);
  pinMode(buzzerPin, OUTPUT);
  BUZZER_status = OFF;
}

void loop() {
  int touchValue = digitalRead(touchModulePin);
  if (!client.connected()) {
    reconnectMQTT();
  }

  if (touchValue == HIGH) {
    // MENTAL TOUCH MODULE เจอโลหะ
    // ปิด Buzzer ก่อน
    tone(buzzerPin, 7000,100); // ตั้งค่าความถี่ของเสียง
    Serial.println("Metal detected"); 
    BUZZER_status = ON; // พิมพ์ข้อความใน Serial Monitor
  } else {
    // MENTAL TOUCH MODULE ไม่เจอโลหะ
    noTone(buzzerPin);
    Serial.println("No metal detected"); 
    BUZZER_status = OFF; // พิมพ์ข้อความใน Serial Monitor
  }
  client.loop();

  String touchModule = (touchValue == HIGH) ? "Metal detected" : "No metal detected";
  publishMessage = "{\"data\": {\"buzzer_status\": " + String(BUZZER_status) + ", \"touch_module\": \"" + touchModule + "\"}}";
  Serial.println(publishMessage);
  client.publish(topic_pub, publishMessage.c_str());


  delay(2000);
}
